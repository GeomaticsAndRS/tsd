NAME
	nimbus.exe − A cloud segmentor.

SYNOPSIS
	./nimbus.exe [--debug] [--nb-iter N] --im-pfx-map IM(1)… IM(n) \
	--opt-stat (2|3) [--opt-disp D --im-disp D(1)… D(n)] \
	[--opt-lum L --im-lum L(1)… L(n)] [--opt-nov N --im-nov N(1)… N(n)] \
	[--opt-sift S --im-sift S(1)… S(n)];

DESCRIPTION
	This program is intended to localize and segment clouds from satellite
	images into a series (U_n) of images. It produces as outputs, a Boolean
	cloud map series (B_n) where 0 values mean clouds while 127 values mean
	no clouds. It uses the NFA «Number of False Alarms» statistical
	framework.  It takes into account 1 to 4 kind of features to estimate
	the clouds. Each feature is represented by a series of images.  It takes
	the following features :
	- the dense disparity maps series (D_n) precomputed by the «create_disparity_maps.py»
	script. 
	- the luminance series (L_n) of a particular channel : R, G, B or IR.
	- the novelty filtered images (N_n) computed by the «novelty_filters.py» 
	script
	- the luminance images (S_n) of a particular channel : R, G, B or IR used for 
	the SIFT filtering

CONFIGURATION
	The program has been written in C with no extra libraries. Check the 
	Makefile for adapting the paths before compiling…
	
USAGE
	Warning :

	-  the supported image format is the TIF format. RAW format is not 
	supported. Outputs are in TIF format.
	- all the images must have the same dimension. 
	- When using several features, each series must have the same number
	of images and must concerns the same order of the images in the series.

	About the parameters :

	--im-disp D(1)… D(n) : where D(1)… D(n) are the n disparity maps of (D_n)
	--opt-disp D : where D is the kind of null-hypothesis used to test
	each image. Values of D are one of the following :
	     − 0 : based upon the median of the series (D_n)
	     − 1 : based upon the current processed jth image D(j)
	     − 2 : based upon the union of the series (D_n)
        Experimentally, 0 gives the best results.

	--im-lum L(1)… L(n) : where L(1)… L(n) are the n luminance images of (L_n)
	--opt-lum L : where L is the kind of null-hypothesis used to test
	each image. Values of L are one of the following :
	     − 0 : based upon the intermediate results of disparity and SIFT
	     features. So with this value (L_n) cannot be used alone : you must
	     specify disparity (D_n) and SIFT (S_n) series…
	     − 1 : based upon the current processed jth image L(j)
	     − 2 : based upon the union of the series (L_n)
	     − 3 : based upon the median of the series (L_n)
        Experimentally, 0 gives the best results. Used alone, the luminance criteria
	is not very efficent.

	--im-nov N(1)… N(n) : where N(1)… N(n) are the n novelty
          images of (N_n)
	--opt-nov N : where N is the kind of null-hypothesis used to test
	each image. Values of N are one of the following :
	     − 0 : based upon the novelty having the minimal norm
	     − 1 : based upon the current processed jth image N(j)
	     − 2 : based upon the union of the series (N_n)
	Experimentally, 0 gives the best results.     

	--im-sift S(1)… S(n) : where S(1)… S(n) are the n luminance
          images of (S_n) used to compute the SIFT descriptors
        --opt-sift S : where S is the kind of null-hypothesis used to test
	each image. Values of S are one of the following :
	     − 0 : based upon the median SIFT descriptors image	
	     − 1 : based upon the current processed jth SIFT descriptors 
	     computed from image S(j)
	     − 2 : based upon the union of the SIFT descriptors computed from
	     the series (S_n)
	Experimentally, 0 gives the best results.     
     
	--opt-stat (2|3) : the way to mix the differents features in the NFA
	statistical test. Values are one of the following :
	     − 2 : additive combinaison (Irwin-Hall) of the features laws 	   
     	     − 3 : multiplicative combinaison of the features laws
	Experimentally, 2 or 3 gives quasi-identical results.     
	       
	--im-pfx-map IM(1)… IM(n) : the prefixes of the output series (B_n)

	--nb-iter N : N is the number of iterations used to process. By default
	N is set to 1. Experimentally the process converges immediately when
	using several features; using a single feature with a lot of iterations
	could lead to a divergence : the whole image could be estimated as a
	cloud.

	--debug : writes some intermediate images

EXAMPLE
	Directory «test_nimbus/» contains the example set baseT12.tar. 
	Given the following series

	− disparity series (D_n) :
	tile_13SGR_acquired_*_orbit_055_band_02_+_mid_02_vs_04_+_rof.tif
	
	− novelty series (N_n) :
	tile_13SGR_acquired_*_orbit_055_band_02_nov.tif
	
	− luminance series (N_n) :
	tile_13SGR_acquired_*_orbit_055_band_02.tif
	
	− series (S_n) for SIFT descriptors :
	tile_13SGR_acquired_*_orbit_055_band_02.tif
		
	run, under a Linux prompt, the commands :

	N=$(tar -tvf baseT12.tar  | grep 02.tif | wc -l);
	prefixes=$(for a in $(seq 1 $N); do echo map-$a; done);
	tar xvf baseT12.tar;
	./nimbus.exe --im-pfx-map $prefixes --opt-stat 2 \
	--opt-disp 0 --im-disp tile*02_vs_04_+_rof.tif \
	--opt-sift 0 --im-sift tile*02.tif \ 
	--opt-lum 0  --im-lum  tile*02.tif \
	--opt-nov 0  --im-nov  tile*nov.tif;


AUTHOR
	Written by Tristan Dagobert 
		   tristan.dagobert@cmla.ens-cachan.fr


